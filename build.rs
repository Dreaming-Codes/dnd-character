use std::env;
use std::io::{BufWriter, Write};

fn write_const_file_to_out_dir(file_name: &str, const_name: &str, const_value: &str) {
    let out_dir = env::var("OUT_DIR").unwrap();
    let dest_path = std::path::Path::new(&out_dir).join(file_name);
    let mut dest_file = BufWriter::new(std::fs::File::create(dest_path).unwrap());
    let src_code = format!(
        r######"// Generated by build.rs
        pub const {const_name}: &str = r#####"{const_value}"#####;"######,
        const_name = const_name,
        const_value = const_value,
    );
    dest_file.write_all(src_code.as_bytes()).unwrap();
}

fn main() {
    println!("cargo:rerun-if-env-changed=DnD_GRAPHQL_API_URL");

    let graphql_url = env::var("DnD_GRAPHQL_API_URL").unwrap_or_else(|_| "https://www.dnd5eapi.co/graphql".to_string());

    // Write GRAPHQL_API_URL to OUT_DIR
    write_const_file_to_out_dir("graphql_url.rs", "GRAPHQL_API_URL", &graphql_url);

    #[cfg(feature = "api")]
    cynic_codegen::register_schema("dnd5eapi")
        .from_sdl_file("schemas/dnd5eapi.graphql")
        .unwrap()
        .as_default()
        .unwrap();
}
